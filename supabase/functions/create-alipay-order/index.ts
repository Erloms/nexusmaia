// @ts-ignore
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
// @ts-ignore
import { createClient } from "https://esm.sh/@supabase/supabase-js@2.49.9";
// @ts-ignore
import { v4 as uuidv4 } from "https://deno.land/std@0.168.0/uuid/mod.ts"; // For generating UUIDs

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  const supabaseClient = createClient(
    // @ts-ignore
    Deno.env.get('SUPABASE_URL') ?? '',
    // @ts-ignore
    Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '', // Use service role key for database access
    {
      auth: {
        persistSession: false,
      },
    },
  );

  try {
    const { user_id, plan_id, amount, subject, return_url, notify_url } = await req.json();

    if (!user_id || !plan_id || !amount || !subject || !return_url || !notify_url) {
      return new Response(
        JSON.stringify({ error: 'Missing required parameters: user_id, plan_id, amount, subject, return_url, notify_url' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // 1. Fetch Alipay configuration
    const { data: alipayConfig, error: configError } = await supabaseClient
      .from('payment_configs')
      .select('*')
      .eq('id', 'alipay_config')
      .single();

    if (configError || !alipayConfig) {
      console.error('Failed to fetch Alipay config:', configError);
      throw new Error('Alipay configuration not found or error fetching it.');
    }

    // 2. Generate a unique internal order ID
    const orderId = uuidv4.generate();
    const outTradeNo = `NEXUS-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`; // Alipay's out_trade_no

    // Determine order_type based on plan_id (using the placeholder IDs from SQL)
    let orderType = 'unknown';
    if (plan_id === 'a0e1b2c3-d4e5-f6a7-b8c9-d0e1f2a3b4c5') {
      orderType = 'annual';
    } else if (plan_id === 'e1f2a3b4-c5d6-e7f8-a9b0-c1d2e3f4a5b6') {
      orderType = 'lifetime';
    } else if (plan_id === 'f5a6b7c8-d9e0-f1a2-b3c4-d5e6f7a8b9c0') {
      orderType = 'agent';
    }

    // 3. Insert a new order record into the 'orders' table
    const { data: orderData, error: orderError } = await supabaseClient
      .from('orders')
      .insert({
        id: orderId,
        user_id: user_id,
        plan_id: plan_id,
        amount: amount,
        status: 'pending',
        payment_method: 'alipay',
        payment_id: outTradeNo, // Use outTradeNo as payment_id for now
        order_type: orderType,
        subject: subject,
      })
      .select()
      .single();

    if (orderError) {
      console.error('Error inserting order:', orderError);
      throw new Error('Failed to create order in database.');
    }

    // 4. Simulate Alipay API call and signing
    // IMPORTANT: In a real application, you would implement the actual Alipay API request
    // and RSA2 signing logic here. This often involves:
    // - Constructing the request parameters according to Alipay's API documentation (e.g., alipay.trade.precreate for QR code)
    // - Signing these parameters using your `alipay_private_key` and a suitable RSA library (e.g., 'jsrsasign' or 'node-rsa' if in Node.js, or a Deno-compatible crypto library)
    // - Sending the signed request to `alipayConfig.alipay_gateway_url`
    // - Parsing Alipay's response to get the QR code URL or redirect form.

    // For demonstration, we'll return a placeholder QR code URL.
    // The actual QR code would be generated by Alipay's API response.
    const simulatedQrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=https://example.com/alipay_mock_payment?order_id=${orderId}&amount=${amount}&user_id=${user_id}`;
    
    // Simulate a successful response from Alipay
    const alipayResponse = {
      alipay_trade_precreate_response: {
        code: '10000',
        msg: 'Success',
        out_trade_no: outTradeNo,
        qr_code: simulatedQrCodeUrl, // This would be the actual QR code from Alipay
      },
      sign: 'SIMULATED_SIGNATURE', // This would be the actual signature from Alipay
    };

    return new Response(
      JSON.stringify({
        order_id: orderId,
        out_trade_no: outTradeNo,
        qr_code_url: alipayResponse.alipay_trade_precreate_response.qr_code,
        message: 'Payment order created successfully. Please scan the QR code to complete payment.',
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Create Alipay Order Error:', error);
    return new Response(
      JSON.stringify({ error: error.message || 'Failed to create Alipay order' }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});